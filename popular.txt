#Valid anagrams

public static boolean anagram(String input1, String input2) {

		if (input1.length() != input2.length()) {

			return false;
		}

		int[] tempArr = new int['z' -'a' + 1];

		for (int i = 0; i < input1.length(); i++) {
			tempArr[input1.toLowerCase().charAt(i) - 'a']++;
			tempArr[input2.toLowerCase().charAt(i) - 'a']--;
		}

		for (int i = 0; i < input1.length(); i++) {
			if (tempArr[input1.toLowerCase().charAt(i) - 'a'] != 0)
				return false;
		}

		return true;
	}

# Find the missing number in the range of the int[]

	public static int findMissingNumber(int[] arr) {
		int n = arr.length + 1;

		int sum = n * (n + 1) / 2;

		for (int i = 0; i < arr.length; i++) {
			sum -= arr[i];
		}

		return sum;
	}


	public static int findMissing(int[] arr, int n){
		int sum = n*(n+1)/2;
		for(int i =0; i< arr.length; i++){
		sum -= arr[i];

		}

	return sum;
	}
# A number is said to be a magic number, if the sum of its digits are calculated till a single digit recursively by adding the sum of the digits after every addition. If the single digit comes out to be 1,then the number is a magic number. 
# static boolean isMagic(int n) {
		int sum = 0;
		while (n > 0 || sum > 9) {
			if (n == 0) {
				n = sum;
				sum = 0;
			}
			sum += n % 10;
			n /= 10;
		}
		return sum == 1;
	}   


# CCI
# Arrays and Srings 
# Implement an algorithm to determine if a string has all unique characters.
	public static boolean uniqueChar(String str) {
		String prefix = "";
		for (int i = 0; i < str.length(); i++) {
			char curChar = str.charAt(i);
			String rem = prefix + str.substring(i+1);
			for (int j = 0; j < rem.length(); j++) {
				if (curChar == rem.charAt(j)) {
					return false;
				}
			}
		}
		return true;
	}

