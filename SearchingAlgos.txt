# Binary Search

	public static int binarySearch(int[] arr, int target){
		int begin = 0;
		int end = arr.length - 1;
		
	while( begin <=  end){
		int found = (begin + end) / 2;

		if(arr[found] == target){
		return found;	
		}

		if(target > arr[found]){
			begin = found +  1;
		}else{
			end = found - 1;
		}
	}
	return -1;
	}
	
# Find the first and last occurance of the integer in a sorted integer array

	

	public static int binarySearchFirstOccurance(int[] arr, int target){
		int begin = 0;
		int end = arr.length - 1;
		int index = -1;
	while( begin <=  end){
		int mid = (begin + end) / 2;
		
		if(arr[mid] == target){
		index = mid;	
		}

		if(target <= arr[mid]){
			end = mid -1;
		}else{
			begin = mid +1;
		}
	}
	return index;
	}

	public static int binarySearchLastOccurance(int[] arr, int target) {
		int index = -1;
		int begin = 0;
		int end = arr.length - 1;
		
		while(begin <= end) {
			int mid = (begin + end) / 2;
			if(arr[mid] == target) {
				index = mid;
			}
			if(target >= arr[mid]){
				begin = mid + 1;
			}else {
				end = mid - 1;
			}
		}
		return index;
	}

# Quick sort

	public static void sort(int [] arr, int begin, int end){
	if(begin < end) {
	int p = partition(arr, begin, end);
	sort(arr, begin, p -1);
	sort(arr, p+1, end);
	}
	}

	public static int partition(int [] arr, int begin, int end){
        
		int i = begin;
		int j = begin;
		int p = arr[end];

		while( i <= end){
			if(arr[i] <= p){
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				j++;
			}
			i++;
			}

	return j-1;
	}


# Odd Even partition

public static void oddEvenPartition(int[] arr) {

		int end = arr.length - 1;

		int i = 0;
		int j = 0;

		while (i <= end) {
			if (arr[i] % 2 == 0) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
				j++;

			}
			i++;
		}

	}


# Binary Tree
public class Tree{
	   private  Node root = null;
	   class Node{
	     private int data;
	     private Node left;
	     private Node right; 
	     public Node(int data){
	       this.data = data;
	     }
	   }
	   
	   public void createTree() {
		   Node first = new Node(1);
		   Node second = new Node(2);
		   Node third = new Node(3);
		   Node fourth = new Node(4);
		   Node fifth = new Node(5);
		   
		   this.root = first;
		   first.left = second;
		   first.right = third;
		   second.left = fourth;
		   second.right = fifth;
	   }
	
	   
	}
