# Binary Tree
public class Tree{
	   private  Node root = null;
	   class Node{
	     private int data;
	     private Node left;
	     private Node right; 
	     public Node(int data){
	       this.data = data;
	     }
	   }
	   
	   public void createTree() {
		   Node first = new Node(1);
		   Node second = new Node(2);
		   Node third = new Node(3);
		   Node fourth = new Node(4);
		   Node fifth = new Node(5);
		   
		   this.root = first;
		   first.left = second;
		   first.right = third;
		   second.left = fourth;
		   second.right = fifth;
	   }
     
    # Preorder Traversal
		public void preOrderTraversal(Node root) {
		if (root == null) {
		   return;
		}
		System.out.println(root.data);
		preOrderTraversal(root.left);
		preOrderTraversal(root.right);
	      }
	   
	}

    # Preorder Traversal recursive
	public void preOrderTraversal(Node root) {

		if (root == null) {
			return;
		}
		Stack<Node> stack = new Stack<>();

		stack.push(root);

		while (!stack.isEmpty()) {
			Node popedNode = stack.pop();
			System.out.println(popedNode.data);
			if (null != popedNode.right) {
				stack.push(popedNode.right);
			}
			if (null != popedNode.left) {
				stack.push(popedNode.left);
			}

		}

	}
