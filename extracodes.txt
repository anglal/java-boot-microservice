Extra Java Codes

# Print prime numbers
		public static boolean isPrime(int n) {
			if (n <= 1) {
				return false;
			}
			int i = 2;
			while (i * i <= n) {
				if (n % i == 0) {
					return false;
				}
				i++;
			}
			return i * i > n;

		}
		
# Print armstrong number
		public static boolean isArmstrong(int n) {
			int x = n;
			int sum = 0;

			while (n > 0) {
				int m = n % 10;
				n = n / 10;
				sum += (m * m * m);
			}
			return (sum == x);
		}


# Reverse an array

		public static void reverseArray(int[] arr) {
			int start = 0;
			int end = arr.length - 1;

			while (start < end) {
				int temp = arr[start];
				arr[start] = arr[end];
				arr[end] = temp;
				start++;
				end--;
			}
		}


# Linear search

		public static int linearSearch(int[] arr, int target) {
			if (arr.length == 0) {
				return -1;
			}
			for (int i = 0; i < arr.length; i++) {
				if (arr[i] == target) {
					return i;
				}

			}

			return -1;
		}

# Linear search character search

		public static boolean searchChar(String str, char a){
			for(int i = 0; i < str.length(); i++){
				if(str.charAt(i) == a){
				 return true;
				}

			}

			return false;
		}
		
		public static boolean searchChar1(String str, char a){
			for(char c: str.toCharArray()){
				if(c == a){
				 return true;
				}

			}

			return false;
		}
		
# Linear search 2D array
		
		public static int[] search2DArr(int[][] arr, int target) {
			for (int i = 0; i < arr.length; i++) {
				for (int j = 0; j < arr[i].length; j++) {
					if (target == arr[i][j]) {
						return new int[] {i,j};
					}
				}

			}

			return new int[] {-1, -1};
		}
