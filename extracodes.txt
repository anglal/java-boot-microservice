Extra Java Codes

# Print prime numbers
	public static boolean isPrime(int n) {
		int count = 2;
		if (n <= 1) {
			return false;
		}
		while (count * count <= n) {
			if (n % count == 0) {
				return false;
			}
			count++;
		}
	
		return true;
	}
		
# Print armstrong number
		public static boolean isArmstrong(int n) {
			int x = n;
			int sum = 0;

			while (n > 0) {
				int m = n % 10;
				n = n / 10;
				sum += (m * m * m);
			}
			return (sum == x);
		}


# Reverse an array

		public static void reverseArray(int[] arr) {
			int start = 0;
			int end = arr.length - 1;

			while (start < end) {
				int temp = arr[start];
				arr[start] = arr[end];
				arr[end] = temp;
				start++;
				end--;
			}
		}


# Linear search

		public static int linearSearch(int[] arr, int target) {
			if (arr.length == 0) {
				return -1;
			}
			for (int i = 0; i < arr.length; i++) {
				if (arr[i] == target) {
					return i;
				}

			}

			return -1;
		}

# Linear search character search

		public static boolean searchChar(String str, char a){
			for(int i = 0; i < str.length(); i++){
				if(str.charAt(i) == a){
				 return true;
				}

			}

			return false;
		}
		
		public static boolean searchChar1(String str, char a){
			for(char c: str.toCharArray()){
				if(c == a){
				 return true;
				}

			}

			return false;
		}
		
# Linear search 2D array
		
		public static int[] search2DArr(int[][] arr, int target) {
			for (int i = 0; i < arr.length; i++) {
				for (int j = 0; j < arr[i].length; j++) {
					if (target == arr[i][j]) {
						return new int[] {i,j};
					}
				}

			}

			return new int[] {-1, -1};
		}


# Minimum search 2D array

		public static int findMin2D(int[][] arr) {
			int min = arr[0][0];

			for (int i = 0; i < arr.length; i++) {
				for (int j = 1; j < arr[i].length; j++) {
					if (arr[i][j] < min) {
						min = arr[i][j];
					}
				}
			}

			return min;
		}

# Leetcode Find Numbers with Even Number of Digits

class Solution {
    public int findNumbers(int[] nums) {
        int count = 0;

        for(int num: nums){
            if(countDigits(num) % 2 == 0){
                count++;
            }
        }
        return count;
    }

    public int countDigits(int n){
        int digit = 0;
        while(n > 0){
            n = n/10;
            digit++;
        }
        return digit;
    }
}

# Leetcode Richest Customer Wealth

class Solution {
    public int maximumWealth(int[][] accounts) {
        int highestAmount = 0;
        for(int customer = 0; customer < accounts.length; customer++){
            int customerAmount = 0;
            for(int account = 0; account < accounts[customer].length; account++){
                customerAmount += accounts[customer][account];
            }
            if(customerAmount > highestAmount){
                 highestAmount = customerAmount;
            }

        }
        return highestAmount;
    }
}
# Find the floor of the given target(important)

		public static int findFloor(int[] arr, int target) {

			int start = 0;
			int end = arr.length - 1;

			while (start <= end) {
				int mid = start + (end - start) / 2;

				if (target < arr[mid]) {
					end = mid - 1;
				} else if (target > arr[mid]) {
					start = mid + 1;
				} else {
					return mid;
				}
			}
			return end;
		}


# Find the ceiling of the given target(important)

		public static int findCeiling(int[] arr, int target){
			int start = 0;
			int end = arr.length - 1;
			
			while(start <= end){
				int mid = start + (end - start)/2;
				if(target < arr[mid]){
					end = mid - 1;
				}else if(target > arr[mid]){
					start = mid + 1;
				}else{
					return mid;	
				}
			}
			
			return start;
		}
		
		
# Leetcode Find Smallest Letter Greater Than Target
class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        int start = 0;
        int end = letters.length - 1;

        while(start <= end){
            int mid = start + (end - start)/2;
            if(target < letters[mid] ){
                end = mid - 1;
            }else{
                start = mid + 1;
            }

        }
        return letters[start % letters.length];
    }
}


# Find First and Last Position of Element in Sorted Array leetcode

class Solution {
    public int[] searchRange(int[] nums, int target) {
        return new int[]{findFirstOccurence(nums, target),findLastOccurence(nums, target)};
    }

    public int findFirstOccurence(int[] nums, int target){
        int index = -1;
        int start = 0;
        int end = nums.length - 1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(target < nums[mid]){
                end = mid - 1;
            }else if(target > nums[mid]){
                start = mid + 1;
            }else{
                index = mid;
                end = mid - 1;
            }
        }
        return index;
    }
    public int findLastOccurence(int[] nums, int target){
        int index = -1;
        int start = 0;
        int end = nums.length - 1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(target < nums[mid]){
                end = mid - 1;
            }else if(target > nums[mid]){
                start = mid + 1;
            }else{
                index = mid;
                start = mid + 1;
            }
        }
    return index;
    }
}


# Find position of an element in a sorted array of infinite numbers Amazon
		public static int findPosition(int[] arr, int target) {
			int start = 0;
			int end = 1;
			while (target > arr[end]) {
				int temp = end;
				end = end + 2 * (end - start + 1);
				start = temp + 1;
			}

			while (start <= end) {
				int mid = start + (end - start) / 2;
				if (target < arr[mid]) {
					end = mid - 1;
				} else if (target > arr[mid]) {
					start = mid + 1;
				} else {
					return mid;
				}
			}
			return -1;
		}


# Find the peak in the mountain array leetcode
class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int start = 0;
        int end = arr.length - 1;

        while(start < end){
            int mid = start + (end - start)/2;
            if(arr[mid] < arr[mid + 1]){
                start = mid + 1;
            }else{
                end = mid;
            }
        }
        return start;
    }
}


# Find Peak Element Leetcode

class Solution {
    public int findPeakElement(int[] nums) {
        int start = 0;
        int end = nums.length - 1;

        while(start < end){
            int mid = start + (end - start)/2;
            if(nums[mid + 1] > nums[mid]){
                start = mid + 1;
            }else{
                end = mid;
            }
        }
        return end;
    }
}


# Find in Mountain Array
  ]]/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        // find peak
        int peak = findPeak(mountainArr);
        int find1 =  findAsc(mountainArr, target, peak);
        if(find1 == -1){
            find1 = findDesc(mountainArr, target, peak);
        }
        return find1;
    }

    public int findPeak(MountainArray mountainArr){
        int start = 0;
        int end = mountainArr.length()-1;

        while(start < end){
            int mid = start + (end - start)/2;
            if(mountainArr.get(mid) < mountainArr.get(mid+1)){
                start = mid + 1;
            }else{
                end = mid;
            }
        }
        return start;
    }

    public int findAsc( MountainArray mountainArr,int target, int peak){
        if(mountainArr.get(peak) > mountainArr.get(0)){
            int start = 0;
            int end = peak;
            while(start <= end){
                int mid = start + (end - start)/2;
                if(target < mountainArr.get(mid)){
                    end = mid - 1;
                }else if(target > mountainArr.get(mid)){
                    start = mid + 1;
                }else{
                    return mid;
                }
            }   
        }
        return -1;
    }

    public int findDesc(MountainArray mountainArr, int target, int peak){
        if(mountainArr.get(peak) > mountainArr.get(mountainArr.length()-1)){
            int start = peak;
            int end = mountainArr.length()-1;
            while(start <= end){
                int mid = start + (end - start)/2;
                if(target < mountainArr.get(mid)){
                    start = mid + 1;
                }else if(target > mountainArr.get(mid)){
                    end = mid - 1;
                }else{
                    return mid;
                }
            }
        }
        return -1;
    }

}

# Search in rotated sorted array leetcode
class Solution {
    public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        			while (start <= end) {
				int mid = start + (end - start) / 2;
				if (target == nums[mid]) {
					return mid;
				} else if (nums[start] <= nums[mid]) {
					if (nums[start] <= target && target <= nums[mid]) {
						end = mid - 1;
					} else {
						start = mid + 1;
					}
				} else if (nums[mid] <= nums[end]) {
					if (nums[mid] <= target && target <= nums[end]) {
						start = mid + 1;
					} else {
						end = mid - 1;
					}
				}else {
				return -1;
				}
			}
			return -1;
        
    }
		
}


# Jump game leetcode

class Solution {
    public boolean canJump(int[] nums) {

    int jump = 0;
    for(int i = 0; i <= jump; i++){
        jump = Math.max(i + nums[i], jump);
        if(jump >= nums.length - 1){
            return true;
        };
    } 
    return false;
    }
}


# Bitwise operators
# Find odd number
	public static boolean odd(int x){
		return (x & 1) == 1;
	}



# Find unique number

	public static int findUnique(int[] arr){
		// All elements are two,find the one which is only one.
		int answer = 0;
		for(int item: arr){
		answer ^= item;	
		}
		return answer;
	}


# Find ith bit

	public static int findBit(int num, int position) {
		return (num & (1 << (position - 1))) >> position-1;
	}
	

# Set ith bit

	public static int setIthBit(int number, int position){
		// 1 1 0 0 1
		// 1 + 8 + 16 = 25
		// 1 1 1 0 1
		// 1 + 4 + 8 + 16 = 29
		return number | (1 << position-1);
		
	}
	
# Unset ith bit

	public static int resetIthBit(int number, int position){

		// 1 1 0 0 1
		// 0 1 0 0 0
		// 0 1 0 0 0
			return number & (~(1 << (position -1)));
		
		}

# Find magic number #Amazon
	public static int findMagicNumber(int n){
		int answer = 0;
		int base = 5;
		while(n > 0){
		
		answer += base * (n & 1);
		n = n>>1;
		base *= 5;
		}
		return answer;
	}

# Find sum of pascal row

1		1	1	1 << 0 
1 1		2	10	1 << 1
1 2 1		4	100	1 << 2
1 3 3 1		8	1000	1 << 3

sum = 2 ^ n;

	public static int pascalSum(int n) {

		return 1 << (n - 1);

	}

# Find whether the given number is power of 2

	public static boolean powerOfTwo(int n){
		// n = 1 0 0 0 0
		// n - 1 = 1 1 1 1
		
		boolean answer = false;
		answer = ((n & (n-1)) == 0);
		return answer;
	}


# Find the value

	public static int pow(int base, int power){
	       //  1   1   1 = 7
	       //  4   2   1
	       // 5   5   5

		int answer = 1;
		while(power > 0){
			if((power & 1) == 1){
			answer = base * answer;
			}
			base = base * base;
			power = power >> 1;
		}
		return  answer;
	}



//	Find the Xor of all numbers upto n
	public static int findXor(int n) {

//	0 0	-> n	0 % 4 = 0
//	1 1	-> 1	1 % 4 = 1
//	2 3	-> n+1	2 % 4 = 2
//	3 0	-> 0	3 % 4 = 3
//	4 4	-> n	4 % 4 = 0 
//	5 1  	-> 1	5 % 4 = 1
//	6 7	-> n+1	6 % 4 = 2
//	7 0	-> 0	7 % 4 = 3
//	8 8	-> n	8 % 4 = 0 
//	9 1	-> 1	9 % 4 = 1
//	10 11	-> n+1	10% 4 = 2
//	11 0	-> 0	11% 4 = 3

		if (n % 4 == 0) {
			return n;
		} else if (n % 4 == 1) {
			return 1;
		} else if (n % 4 == 2) {
			return n + 1;
		}
		return 0;
	}


# Flipping an Image # leetcode google

class Solution {
    public int[][] flipAndInvertImage(int[][] image) {
  
        for(int i = 0; i < image.length; i++){
            int left = 0; 
            int right = image[i].length - 1;
            while(left <= right){
                int temp = image[i][left];
                image[i][left] = image[i][right] ^ 1;
                image[i][right] = temp ^ 1 ;
                left++;
                right--;
            }
        }
        return image;
    }
}


# Fibonacci number dp

public static BigDecimal fib(int n) {
		// Store answer yourself, no one else does that for you
		
		if (n == 0) {
			return BigDecimal.ZERO;
		}
		if (n == 1) {
			return BigDecimal.ONE;
		}
		// is there a answer???
		if (store.get(n) != null) {
			// yes
			return store.get(n);
		} 
			// no find and store for future use
			
			BigDecimal val = fib(n - 2).add(fib(n - 1));
			store.put(n, val);
			return val;	
	}  
	
# CanSum dp
	public static boolean canSum(int m, int[]n, Map<Integer,Boolean>memo) {
		calls++;
		if(memo.get(m) != null) {
			return memo.get(m);
		}
		if(m == 0) {
			return true;
		}
		if(m < 0) {
			return false;
		}
		
		for(int x: n) {
			int l = m - x;
			boolean result = canSum(l,n,memo);
			if(result) {
				memo.put(m, true);
				return true;
			}
		}
		memo.put(m, false);
		return false;
	}


# How Sun dp
	public static List<Integer> howSum(int m, int[]n, Map<Integer,List<Integer>>memo) {
		calls++;
		if(memo.containsKey(m)) {
			return memo.get(m);
		}
		if(m == 0) {
			return new ArrayList<Integer>();
		}
		if(m < 0) {
			return null;
		}
		
		for(int x: n) {
			int l = m - x;
			List<Integer> result = howSum(l,n, memo);
			if(result != null) {
				result.add(x);
				memo.put(m, result);
				return result;
			}
		}
		memo.put(m, null);
		return null;
	}
	
# Best sum recursive
	public static List<Integer>bestSum(int m, int[] n){
		calls++;
		if(m == 0) {
			return new ArrayList<Integer>();
		}
		if(m < 0) {
			return null;
		}
		
		List<Integer> bestResult = null;
		
		for(int l: n) {
			List<Integer> result = bestSum(m-l, n);
			if(result != null) {
				result.add(l);
				if(bestResult == null || bestResult.size() > result.size()) {
					bestResult = result;
				}
			}
		}
		
		
		return bestResult;
	}
