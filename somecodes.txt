1. Reverse an int[]

public static int[] reverseAnArray(int[] arr) {
		int start = 0;
		int end = arr.length-1;
		
		while(start < end) {
			int temp = arr[start];
			arr[start] = arr[end];
			arr[end] = temp;
			start++;
			end--;
	
		}
		
		return arr;
	}


2. Find the minimum number form int[]

	public static int findMinimum(int[] arr) {
		int minimum = arr[0];

		for (int i = 1; i < arr.length; i++) {
			if (arr[i] < minimum)
				minimum = arr[i];

		}
		return minimum;
	
	
3. Find even numbers in int[]
	public static int[] findEvenNumbers(int[] arr) {
		int size = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % 2 == 0) {
				size++;
			}
		}

		int[] result = new int[size];
		for (int i = 0, j = 0; i < arr.length; i++) {
			if (arr[i] % 2 == 0) {
				result[j] = arr[i];
				j++;
			}
		}
		return result;
	}

4. Reverse an int[]
	
		int begin = 0;
		int end = arr.length - 1;

		while (begin < end) {

			int temp = arr[begin];
			arr[begin] = arr[end];
			arr[end] = temp;
			begin++;
			end--;
		}

		return arr;
	}
	

5. Separate odd to left and even to right in int[]

	public static int[] separateEvenOdd(int[] arr) {

		int begin = 0;
		int end = arr.length - 1;

		while (begin < end) {
			if (arr[begin] % 2 == 0 && arr[end] % 2 != 0) {
				int temp = arr[begin];
				arr[begin] = arr[end];
				arr[end] = temp;

				begin++;
				end--;
				continue;

			} else if (arr[begin] % 2 != 0 && arr[end] % 2 != 0) {
				begin++;
				continue;
			} else if (arr[begin] % 2 != 0 && arr[end] % 2 == 0) {
				begin++;
				end--;
				continue;

			}

			if (arr[begin] % 2 == 0 && arr[end] % 2 == 0) {

				end--;
			}

		}
		return arr;

	}
	
	
6. Find the minimum from int[]

	public static int findMin(int[] arr) {
		int minimum = arr[0];

		for (int i = 1; i < arr.length; i++) {
			if (arr[i] < minimum) {

				minimum = arr[i];
			}
		}

		return minimum;
	}

7. Find the second maximum value from int []

	public static int secondMax(int[] arr) {
		
		int max = Integer.MIN_VALUE;
		int secondMax = Integer.MIN_VALUE;
		
		for(int i = 0; i < arr.length; i++) {
			if(arr[i] > max) {
				secondMax = max;
				max = arr[i];
			}
			else if(arr[i] > secondMax && max != arr[i]) {
				secondMax = arr[i];
			}
		}
		
		return secondMax;
	}


8. Find the third maximum value from int[]

	public static int thirdMax(int[] arr) {
		
		int max = Integer.MIN_VALUE;
		int secondMax = Integer.MIN_VALUE;
		int thirdMax = Integer.MIN_VALUE;
		
		for(int i = 0; i < arr.length; i++) {
			if(arr[i] > max) {
				thirdMax = secondMax;
				secondMax = max;
				max = arr[i];
			}
			else if(arr[i] > secondMax && arr[i] < max) {
				thirdMax = secondMax;
				secondMax = arr[i];
				
			}
			else if(arr[i ] > thirdMax && arr[i] < secondMax ) {
				thirdMax = arr[i];
			}
		}
		
		return thirdMax;
	}


9. Move even nubmers to right in int[]

	public static void moveEvenToRight(int[] arr) {
		int i = 0;
		int j = 0;

		for (; i < arr.length; i++) {

			if (arr[i] % 2 != 0 && arr[j] % 2 == 0) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			if (arr[j] % 2 != 0) {
				j++;
			}
		}

	}
}

10. Move zeros to right in int[]
	public static void moveZeroToRight(int[] arr) {
		int i = 0;
		int j = 0;

		for (; i < arr.length; i++) {
			if (arr[j] == 0 && arr[i] != 0) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;

			}
			if (arr[j] != 0) {
				j++;
			}

		}

	}

11. Resize an int[]

	public static int[] resize(int[] arr, int size) {

		int[] resizedArr = new int[size];
		for (int i = 0; i < arr.length; i++) {
			resizedArr[i] = arr[i];

		}

		return resizedArr;

	}


12. Find the missing number in the range of the int[]

	public static int findMissingNumber(int[] arr) {
		int n = arr.length + 1;

		int sum = n * (n + 1) / 2;

		for (int i = 0; i < arr.length; i++) {
			sum -= arr[i];
		}

		return sum;
	}
	
13. Check whether the string is a pallindrome

public static boolean checkPalin(String str) {

		char[] arr = str.toCharArray();

		int i = 0;
		int j = str.length() - 1;

		while (i < j) {
			if (arr[i] != arr[j]) {
				return false;
			}

			i++;
			j--;
		}

		return true;
	}



14. Create a singly linked list in java

public class SinglyLinkedList {

	private ListNode head;

	private static class ListNode {

		private int data;

		private ListNode next;

		public ListNode(int data) {
			this.data = data;
			this.next = null;

		}

	}

}


15. Create singly linked list 1->2->3

public class SinglyLinkedList {

	private ListNode head;

	private static class ListNode {

		private int data;

		private ListNode next;

		public ListNode(int data) {
			this.data = data;
			this.next = null;

		}

	}

	public static void main(String[] args) {
		SinglyLinkedList linkedList = new SinglyLinkedList();
		linkedList.head = new ListNode(1);
		ListNode node2 = new ListNode(2);
		ListNode node3 = new ListNode(3);

		linkedList.head.next = node2;
		node2.next = node3;

	}

}


16. Print the elements of the given singly linked list if head is given

	public static void printSinglyLinkedList(ListNode head) {

		ListNode current = head;
		while (current != null) {
			System.out.println(current.data);
			current = current.next;
		}

	
	
17. Find the length of the Singly Linked List if head is given

public static int findLength(ListNode head) {

		ListNode current = head;
		int length = 0;
		while (current != null) {
			length++;
			current = current.next;
		}

		return length;

	}


18. Insert a node at the beginning of the Singly Linked List

	public static ListNode addNodeAtBegin(ListNode head, int data) {
		ListNode node = new ListNode(data);
		node.next = head;
		head = node;
		return head;
	}
	
	
19. Insert a node at the end of the Singly Linked List

public void addNodeAtEnd(int data) {
		
		
		ListNode newNode = new ListNode(data);
		if(null == head) {
			head = newNode;
			
		}else {
			ListNode last = head;
			while(null != last.next) {
				last = last.next;
			}
		last.next = newNode;
		}
	}


20. Insert the data in the given position
		public void insertAt(int position, int data) {
		ListNode newNode = new ListNode(data);

		if (1 == position) {
			newNode.next = head;
			head = newNode;
		} else {

			ListNode previous = head;
			int count = 1;
			// Find the previous node of the position
			while (count < position - 1) {
				previous = previous.next;
				count++;
			}

			newNode.next = previous.next;
			previous.next = newNode;
		}
	}

21. Find maximum occuring character

public static char mostOccurChar(String input) {

		int[] count = new int[256];

		for (int i = 0; i < input.length(); i++) {
			count[input.charAt(i)]++;
		}

		int max = count[input.charAt(0)];
		char maxChar = input.charAt(0);

		for (int i = 1; i < input.length(); i++) {
			if (count[input.charAt(i)] > max) {
				max = count[input.charAt(i)];
				maxChar = input.charAt(i);
			}

		}

		return maxChar;
	}
	
	
23. Delete first node of Singly Linked List

	public ListNode deleteFirst() {

		if (null == head) {

			return null;
		}
		ListNode temp = head;
		head = head.next;
		temp.next = null;

		return temp;

	}

24. Delete the last node of Singly Linked List

public ListNode deleteLastNode() {

		if (head == null) {
			return null;
		}

		if (head.next == null) {
			ListNode ans = head;
			head = null;
			return ans;
		}

		ListNode last = head;
		ListNode sLast = null;

		while (last.next != null) {
			sLast = last;
			last = last.next;
		}

		sLast.next = null;
		return last;

	}
25. Delete a node in a given position.

public void deleteAt(int position) {

		if (position == 1) {
			head = head.next;
			return;
		}

		ListNode previous = head;

		int count = 1;

		while (count < position - 1) {
			previous = previous.next;
			count++;
		}

		previous.next = previous.next.next;
	}
26. Find an element in given position in Singly Linked List

	public int findElementAt(int position) {

		ListNode current = head;

		int count = 1;

		while (count < position) {

			current = current.next;
			count++;

		}

		return current.data;

	}
	
27. Search an element in Singly Linked List.
	public boolean findElement(int data) {

		ListNode current = head;
		while (current != null) {

			if (data == current.data) {

				return true;
			}

			current = current.next;

		}

		return false;
	}
28. Find the middle of the Singly Linked List.

	public ListNode findMiddle() {
		if (head == null) {
			return null;
		}

		ListNode sp = head;
		ListNode fp = head;

		while (fp != null && fp.next != null) {
			sp = sp.next;
			fp = fp.next.next;
		}

		return sp;
	}
	
29. Find the nth element from last node.

	public ListNode findNthElementFromEnd(int position) {

		ListNode ref = head;
		ListNode cur = head;

		int count = 1;

		while (count < position) {
			ref = ref.next;
			count++;
		}

		while (ref.next != null) {
			ref = ref.next;
			cur = cur.next;
		}

		return cur;
	}
	
30. Remove duplicates from sorted Singliy Linked List.

		public void removeDuplicate() {
		ListNode cur = head;
		while (cur != null && cur.next != null) {
			if (cur.data == cur.next.data) {
				cur.next = cur.next.next;
			} else {
				cur = cur.next;
			}
		}

	}
	
31. Insert into sorted Singly Linked List.

	public void insertInSortedArray(int data) {
		ListNode newNode = new ListNode(data);
		if (data <= head.data) {
			newNode.next = head;
			head = newNode;
			return;
		}

		ListNode previous = null;
		ListNode current = head;

		while (current != null && data > current.data) {
			previous = current;
			current = current.next;
		}

		newNode.next = current;
		previous.next = newNode;

	}
	
32. Detect a loop in Singly Linked List.

	public boolean detectLoop(ListNode head) {

		ListNode sp = head;
		ListNode fp = head;
		while (fp != null && fp.next != null) {
			fp = fp.next.next;
			sp = sp.next;

			if (fp == sp) {
				return true;
			}
		}

		return false;

	}
	
	
33. Find the start of the loop in Singly Linked list.

	public ListNode findStartOfLoop(ListNode head) {
		// Detect the loop
		// And find the start of the loop
		ListNode sp = head;
		ListNode fp = head;

		while (fp != null && fp.next != null) {
			
			fp = fp.next.next;
			sp = sp.next;
			if (sp == fp) {
				return findStart(sp, head);
			}
		}

		return null;
	}

	private ListNode findStart(ListNode sp, ListNode head) {
		ListNode temp = head;
		while (sp != temp) {
			sp = sp.next;
			temp = temp.next;
		}
		return temp;
	}
	
34. Remove the loop in Singly Linked List.

	public void removeLoop(ListNode head){
		if(head == null){
		  return;
		}

		ListNode sp = head;
		ListNode fp = head;

		ListNode start = head;
		while(fp != null &&  fp.next != null){
		    fp = fp.next.next;
			sp = sp.next;
			if(sp == fp){
			removeLoop(sp, start);
			return;
			}
		    }

		}

		private void removeLoop(ListNode sp, ListNode start){
			while(sp.next != start.next){
			sp = sp.next;
			start = start.next;
		}
		sp.next = null;		
		}
		
35. Merge two sorted LinkedLists.

	public ListNode mergeSortedLinkedList(ListNode head1, ListNode head2) {
		ListNode temp = new ListNode(0);
		ListNode followTemp = temp;

		while (head1 != null && head2 != null) {
			if (head1.data < head2.data) {
				followTemp.next = head1;
				head1 = head1.next;
			} else {
				followTemp.next = head2;
				head2 = head2.next;
			}
			followTemp = followTemp.next;
		}
		if (head1 == null) {
			followTemp.next = head2;
		} else {
			followTemp.next = head1;

		}

		return temp.next;

	}

22. Find average, highest, lowest and failures in an array list. Pass marks is 35.

	public static ArrayList<Integer> studentReport(Integer[] history, Integer[] geography, Integer[] moral, Integer[] calculus, Integer[] social) {


		ArrayList<Integer> result = new ArrayList<Integer>();

		int historyAve = 0;
		int geographyAve = 0;
		int moralAve = 0;
		int calculusAve = 0;
		int socialAve = 0;

		int historyHighest = history[0];
		int geographyHighest = geography[0];
		int moralHighest = moral[0];
		int calculusHighest = calculus[0];
		int socialHighest = social[0];

		int historyLowest = history[0];
		int geographyLowest = geography[0];
		int moralLowest = moral[0];
		int calculusLowest = calculus[0];
		int socialLowest = social[0];

		int failHistory = 0;
		int failGeography = 0;
		int failMoral = 0;
		int failCalculus = 0;
		int failSocial = 0;

		for (int i = 0; i < history.length; i++) {
			historyAve += history[i];
			geographyAve += geography[i];
			moralAve += moral[i];
			calculusAve += calculus[i];
			socialAve += social[i];

			if (history[i] > historyHighest) {
				historyHighest = history[i];
			}
			if (geography[i] > geographyHighest) {
				geographyHighest = geography[i];
			}
			if (moral[i] > moralHighest) {
				moralHighest = moral[i];
			}
			if (calculus[i] > calculusHighest) {
				calculusHighest = calculus[i];
			}
			if (social[i] > socialHighest) {
				socialHighest = social[i];
			}

			if (history[i] < historyLowest) {
				historyLowest = history[i];
			}
			if (geography[i] < geographyLowest) {
				geographyLowest = geography[i];
			}
			if (moral[i] < moralLowest) {
				moralLowest = moral[i];
			}
			if (calculus[i] < calculusLowest) {
				calculusLowest = calculus[i];
			}
			if (social[i] < socialLowest) {
				socialLowest = social[i];
			}

			if (history[i] < 35) {
				failHistory++;
			}
			if (geography[i] < 35) {
				failGeography++;
			}
			if (moral[i] < 35) {
				failMoral++;
			}
			if (calculus[i] < 35) {
				failCalculus++;
			}
			if (social[i] < 35) {
				failSocial++;
			}

		}
		historyAve /= history.length;
		geographyAve /= history.length;
		moralAve /= history.length;
		calculusAve /= history.length;
		socialAve /= history.length;

		result.add(historyAve);
		result.add(geographyAve);
		result.add(moralAve);
		result.add(calculusAve);
		result.add(socialAve);

		result.add(historyHighest);
		result.add(geographyHighest);
		result.add(moralHighest);
		result.add(calculusHighest);
		result.add(socialHighest);

		result.add(historyLowest);
		result.add(geographyLowest);
		result.add(moralLowest);
		result.add(calculusLowest);
		result.add(socialLowest);

		result.add(failHistory);
		result.add(failGeography);
		result.add(failMoral);
		result.add(failCalculus);
		result.add(failSocial);

		return result;

	}

