1. Reverse an int[]

public static int[] reverseAnArray(int[] arr) {
		int start = 0;
		int end = arr.length-1;
		
		while(start < end) {
			int temp = arr[start];
			arr[start] = arr[end];
			arr[end] = temp;
			start++;
			end--;
	
		}
		
		return arr;
	}


2. Find the minimum number form int[]

	public static int findMinimum(int[] arr) {
		int minimum = arr[0];

		for (int i = 1; i < arr.length; i++) {
			if (arr[i] < minimum)
				minimum = arr[i];

		}
		return minimum;
	
	
3. Find even numbers in int[]
	public static int[] findEvenNumbers(int[] arr) {
		int size = 0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % 2 == 0) {
				size++;
			}
		}

		int[] result = new int[size];
		for (int i = 0, j = 0; i < arr.length; i++) {
			if (arr[i] % 2 == 0) {
				result[j] = arr[i];
				j++;
			}
		}
		return result;
	}

4. Reverse an int[]
	
		int begin = 0;
		int end = arr.length - 1;

		while (begin < end) {

			int temp = arr[begin];
			arr[begin] = arr[end];
			arr[end] = temp;
			begin++;
			end--;
		}

		return arr;
	}
	

5. Separate odd to left and even to right in int[]

	public static int[] separateEvenOdd(int[] arr) {

		int begin = 0;
		int end = arr.length - 1;

		while (begin < end) {
			if (arr[begin] % 2 == 0 && arr[end] % 2 != 0) {
				int temp = arr[begin];
				arr[begin] = arr[end];
				arr[end] = temp;

				begin++;
				end--;
				continue;

			} else if (arr[begin] % 2 != 0 && arr[end] % 2 != 0) {
				begin++;
				continue;
			} else if (arr[begin] % 2 != 0 && arr[end] % 2 == 0) {
				begin++;
				end--;
				continue;

			}

			if (arr[begin] % 2 == 0 && arr[end] % 2 == 0) {

				end--;
			}

		}
		return arr;

	}
	
	
6. Find the minimum from int[]

	public static int findMin(int[] arr) {
		int minimum = arr[0];

		for (int i = 1; i < arr.length; i++) {
			if (arr[i] < minimum) {

				minimum = arr[i];
			}
		}

		return minimum;
	}

7. Find the second maximum value from int []

	public static int secondMax(int[] arr) {
		
		int max = Integer.MIN_VALUE;
		int secondMax = Integer.MIN_VALUE;
		
		for(int i = 0; i < arr.length; i++) {
			if(arr[i] > max) {
				secondMax = max;
				max = arr[i];
			}
			else if(arr[i] > secondMax && max != arr[i]) {
				secondMax = arr[i];
			}
		}
		
		return secondMax;
	}


8. Find the third maximum value from int[]

	public static int thirdMax(int[] arr) {
		
		int max = Integer.MIN_VALUE;
		int secondMax = Integer.MIN_VALUE;
		int thirdMax = Integer.MIN_VALUE;
		
		for(int i = 0; i < arr.length; i++) {
			if(arr[i] > max) {
				thirdMax = secondMax;
				secondMax = max;
				max = arr[i];
			}
			else if(arr[i] > secondMax && arr[i] < max) {
				thirdMax = secondMax;
				secondMax = arr[i];
				
			}
			else if(arr[i ] > thirdMax && arr[i] < secondMax ) {
				thirdMax = arr[i];
			}
		}
		
		return thirdMax;
	}


9. Move even nubmers to right in int[]

	public static void moveEvenToRight(int[] arr) {
		int i = 0;
		int j = 0;

		for (; i < arr.length; i++) {

			if (arr[i] % 2 != 0 && arr[j] % 2 == 0) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			if (arr[j] % 2 != 0) {
				j++;
			}
		}

	}
}

10. Move zeros to right in int[]
	public static void moveZeroToRight(int[] arr) {
		int i = 0;
		int j = 0;

		for (; i < arr.length; i++) {
			if (arr[j] == 0 && arr[i] != 0) {
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;

			}
			if (arr[j] != 0) {
				j++;
			}

		}

	}

11. Resize an int[]

	public static int[] resize(int[] arr, int size) {

		int[] resizedArr = new int[size];
		for (int i = 0; i < arr.length; i++) {
			resizedArr[i] = arr[i];

		}

		return resizedArr;

	}
