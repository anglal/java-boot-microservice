# Pull a single remote branch
- Create and checkout to the local branch
- pull the remote branch : git pull origin branchname 

# Check out the remote branch when local branch has not been created yet
-git checkout -b localBranch remote branch

# Create a local branch
git checkout -b branch1

# Create a remote branch on repo with given name and push the code

git push -u origin branch1

# Resetting git user and email

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

	After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

# See user details
git config --list

# See all branches(remote and local)
git branch -a

# See all local branches
git branch

# See all remote branches
git branch -r

# Delete remote branch
git push origin --delete branch1

# Delete local branch
git branch -d branch1

# Discard changes in local branch when files are tracked
git checkout .

# Prune branches(branch is deleted in remote but still shows on local while doing git branch -a)
git remote prune origin

# Undo the deletion
git checkout Head <filename>

#Undo unstaged changes
git checkout <filename>

# See changes in commits/merge
git show <commitnuber/mergenumber>

# Compare two branches
git diff branch1..branch2

# Compare specific file between two branches
git diff branch1..branch2 -- <filename>
eg. git diff feature/branch1..develop/branch2 -- pom.xml

# Rebase develop branch on to feature branch
# Feature branch will get all the commits in develop
# Feature branch will be on top of develop branch


# First check out to feature branch
git rebase develop

# Unstage the file 
git reset <filename>

# Stash changes
git stash

# Restore the stashed changes
git stash pop

